// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/proto.proto

#ifndef PROTOBUF_protos_2fproto_2eproto__INCLUDED
#define PROTOBUF_protos_2fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protos_2fproto_2eproto();
void protobuf_AssignDesc_protos_2fproto_2eproto();
void protobuf_ShutdownFile_protos_2fproto_2eproto();

class ccgs_header;
class packet_test;
class packet_user_login;

// ===================================================================

class ccgs_header : public ::google::protobuf::Message {
 public:
  ccgs_header();
  virtual ~ccgs_header();

  ccgs_header(const ccgs_header& from);

  inline ccgs_header& operator=(const ccgs_header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ccgs_header& default_instance();

  void Swap(ccgs_header* other);

  // implements Message ----------------------------------------------

  ccgs_header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ccgs_header& from);
  void MergeFrom(const ccgs_header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline ::google::protobuf::uint32 identifier() const;
  inline void set_identifier(::google::protobuf::uint32 value);

  // required uint32 TID = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTIDFieldNumber = 2;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // required uint32 flags_status = 3;
  inline bool has_flags_status() const;
  inline void clear_flags_status();
  static const int kFlagsStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 flags_status() const;
  inline void set_flags_status(::google::protobuf::uint32 value);

  // required uint32 MID = 4;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMIDFieldNumber = 4;
  inline ::google::protobuf::uint32 mid() const;
  inline void set_mid(::google::protobuf::uint32 value);

  // required uint32 length = 5;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ccgs_header)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_flags_status();
  inline void clear_has_flags_status();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 identifier_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 flags_status_;
  ::google::protobuf::uint32 mid_;
  ::google::protobuf::uint32 length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fproto_2eproto();
  friend void protobuf_AssignDesc_protos_2fproto_2eproto();
  friend void protobuf_ShutdownFile_protos_2fproto_2eproto();

  void InitAsDefaultInstance();
  static ccgs_header* default_instance_;
};
// -------------------------------------------------------------------

class packet_test : public ::google::protobuf::Message {
 public:
  packet_test();
  virtual ~packet_test();

  packet_test(const packet_test& from);

  inline packet_test& operator=(const packet_test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_test& default_instance();

  void Swap(packet_test* other);

  // implements Message ----------------------------------------------

  packet_test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_test& from);
  void MergeFrom(const packet_test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiValue = 1;
  inline bool has_uivalue() const;
  inline void clear_uivalue();
  static const int kUiValueFieldNumber = 1;
  inline ::google::protobuf::uint32 uivalue() const;
  inline void set_uivalue(::google::protobuf::uint32 value);

  // required int32 iValue = 2;
  inline bool has_ivalue() const;
  inline void clear_ivalue();
  static const int kIValueFieldNumber = 2;
  inline ::google::protobuf::int32 ivalue() const;
  inline void set_ivalue(::google::protobuf::int32 value);

  // required string sValue = 3;
  inline bool has_svalue() const;
  inline void clear_svalue();
  static const int kSValueFieldNumber = 3;
  inline const ::std::string& svalue() const;
  inline void set_svalue(const ::std::string& value);
  inline void set_svalue(const char* value);
  inline void set_svalue(const char* value, size_t size);
  inline ::std::string* mutable_svalue();
  inline ::std::string* release_svalue();
  inline void set_allocated_svalue(::std::string* svalue);

  // @@protoc_insertion_point(class_scope:packet_test)
 private:
  inline void set_has_uivalue();
  inline void clear_has_uivalue();
  inline void set_has_ivalue();
  inline void clear_has_ivalue();
  inline void set_has_svalue();
  inline void clear_has_svalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uivalue_;
  ::google::protobuf::int32 ivalue_;
  ::std::string* svalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fproto_2eproto();
  friend void protobuf_AssignDesc_protos_2fproto_2eproto();
  friend void protobuf_ShutdownFile_protos_2fproto_2eproto();

  void InitAsDefaultInstance();
  static packet_test* default_instance_;
};
// -------------------------------------------------------------------

class packet_user_login : public ::google::protobuf::Message {
 public:
  packet_user_login();
  virtual ~packet_user_login();

  packet_user_login(const packet_user_login& from);

  inline packet_user_login& operator=(const packet_user_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_user_login& default_instance();

  void Swap(packet_user_login* other);

  // implements Message ----------------------------------------------

  packet_user_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_user_login& from);
  void MergeFrom(const packet_user_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sUserName = 1;
  inline bool has_susername() const;
  inline void clear_susername();
  static const int kSUserNameFieldNumber = 1;
  inline const ::std::string& susername() const;
  inline void set_susername(const ::std::string& value);
  inline void set_susername(const char* value);
  inline void set_susername(const char* value, size_t size);
  inline ::std::string* mutable_susername();
  inline ::std::string* release_susername();
  inline void set_allocated_susername(::std::string* susername);

  // required string sPassword = 2;
  inline bool has_spassword() const;
  inline void clear_spassword();
  static const int kSPasswordFieldNumber = 2;
  inline const ::std::string& spassword() const;
  inline void set_spassword(const ::std::string& value);
  inline void set_spassword(const char* value);
  inline void set_spassword(const char* value, size_t size);
  inline ::std::string* mutable_spassword();
  inline ::std::string* release_spassword();
  inline void set_allocated_spassword(::std::string* spassword);

  // required int32 iFlags = 3;
  inline bool has_iflags() const;
  inline void clear_iflags();
  static const int kIFlagsFieldNumber = 3;
  inline ::google::protobuf::int32 iflags() const;
  inline void set_iflags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet_user_login)
 private:
  inline void set_has_susername();
  inline void clear_has_susername();
  inline void set_has_spassword();
  inline void clear_has_spassword();
  inline void set_has_iflags();
  inline void clear_has_iflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* susername_;
  ::std::string* spassword_;
  ::google::protobuf::int32 iflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protos_2fproto_2eproto();
  friend void protobuf_AssignDesc_protos_2fproto_2eproto();
  friend void protobuf_ShutdownFile_protos_2fproto_2eproto();

  void InitAsDefaultInstance();
  static packet_user_login* default_instance_;
};
// ===================================================================


// ===================================================================

// ccgs_header

// required uint32 identifier = 1;
inline bool ccgs_header::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ccgs_header::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ccgs_header::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ccgs_header::clear_identifier() {
  identifier_ = 0u;
  clear_has_identifier();
}
inline ::google::protobuf::uint32 ccgs_header::identifier() const {
  return identifier_;
}
inline void ccgs_header::set_identifier(::google::protobuf::uint32 value) {
  set_has_identifier();
  identifier_ = value;
}

// required uint32 TID = 2;
inline bool ccgs_header::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ccgs_header::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ccgs_header::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ccgs_header::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 ccgs_header::tid() const {
  return tid_;
}
inline void ccgs_header::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// required uint32 flags_status = 3;
inline bool ccgs_header::has_flags_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ccgs_header::set_has_flags_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ccgs_header::clear_has_flags_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ccgs_header::clear_flags_status() {
  flags_status_ = 0u;
  clear_has_flags_status();
}
inline ::google::protobuf::uint32 ccgs_header::flags_status() const {
  return flags_status_;
}
inline void ccgs_header::set_flags_status(::google::protobuf::uint32 value) {
  set_has_flags_status();
  flags_status_ = value;
}

// required uint32 MID = 4;
inline bool ccgs_header::has_mid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ccgs_header::set_has_mid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ccgs_header::clear_has_mid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ccgs_header::clear_mid() {
  mid_ = 0u;
  clear_has_mid();
}
inline ::google::protobuf::uint32 ccgs_header::mid() const {
  return mid_;
}
inline void ccgs_header::set_mid(::google::protobuf::uint32 value) {
  set_has_mid();
  mid_ = value;
}

// required uint32 length = 5;
inline bool ccgs_header::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ccgs_header::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ccgs_header::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ccgs_header::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 ccgs_header::length() const {
  return length_;
}
inline void ccgs_header::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// packet_test

// required uint32 uiValue = 1;
inline bool packet_test::has_uivalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_test::set_has_uivalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_test::clear_has_uivalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_test::clear_uivalue() {
  uivalue_ = 0u;
  clear_has_uivalue();
}
inline ::google::protobuf::uint32 packet_test::uivalue() const {
  return uivalue_;
}
inline void packet_test::set_uivalue(::google::protobuf::uint32 value) {
  set_has_uivalue();
  uivalue_ = value;
}

// required int32 iValue = 2;
inline bool packet_test::has_ivalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_test::set_has_ivalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_test::clear_has_ivalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_test::clear_ivalue() {
  ivalue_ = 0;
  clear_has_ivalue();
}
inline ::google::protobuf::int32 packet_test::ivalue() const {
  return ivalue_;
}
inline void packet_test::set_ivalue(::google::protobuf::int32 value) {
  set_has_ivalue();
  ivalue_ = value;
}

// required string sValue = 3;
inline bool packet_test::has_svalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_test::set_has_svalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_test::clear_has_svalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_test::clear_svalue() {
  if (svalue_ != &::google::protobuf::internal::kEmptyString) {
    svalue_->clear();
  }
  clear_has_svalue();
}
inline const ::std::string& packet_test::svalue() const {
  return *svalue_;
}
inline void packet_test::set_svalue(const ::std::string& value) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(value);
}
inline void packet_test::set_svalue(const char* value) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(value);
}
inline void packet_test::set_svalue(const char* value, size_t size) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packet_test::mutable_svalue() {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    svalue_ = new ::std::string;
  }
  return svalue_;
}
inline ::std::string* packet_test::release_svalue() {
  clear_has_svalue();
  if (svalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = svalue_;
    svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packet_test::set_allocated_svalue(::std::string* svalue) {
  if (svalue_ != &::google::protobuf::internal::kEmptyString) {
    delete svalue_;
  }
  if (svalue) {
    set_has_svalue();
    svalue_ = svalue;
  } else {
    clear_has_svalue();
    svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packet_user_login

// required string sUserName = 1;
inline bool packet_user_login::has_susername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_user_login::set_has_susername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_user_login::clear_has_susername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_user_login::clear_susername() {
  if (susername_ != &::google::protobuf::internal::kEmptyString) {
    susername_->clear();
  }
  clear_has_susername();
}
inline const ::std::string& packet_user_login::susername() const {
  return *susername_;
}
inline void packet_user_login::set_susername(const ::std::string& value) {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::kEmptyString) {
    susername_ = new ::std::string;
  }
  susername_->assign(value);
}
inline void packet_user_login::set_susername(const char* value) {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::kEmptyString) {
    susername_ = new ::std::string;
  }
  susername_->assign(value);
}
inline void packet_user_login::set_susername(const char* value, size_t size) {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::kEmptyString) {
    susername_ = new ::std::string;
  }
  susername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packet_user_login::mutable_susername() {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::kEmptyString) {
    susername_ = new ::std::string;
  }
  return susername_;
}
inline ::std::string* packet_user_login::release_susername() {
  clear_has_susername();
  if (susername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = susername_;
    susername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packet_user_login::set_allocated_susername(::std::string* susername) {
  if (susername_ != &::google::protobuf::internal::kEmptyString) {
    delete susername_;
  }
  if (susername) {
    set_has_susername();
    susername_ = susername;
  } else {
    clear_has_susername();
    susername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sPassword = 2;
inline bool packet_user_login::has_spassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_user_login::set_has_spassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_user_login::clear_has_spassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_user_login::clear_spassword() {
  if (spassword_ != &::google::protobuf::internal::kEmptyString) {
    spassword_->clear();
  }
  clear_has_spassword();
}
inline const ::std::string& packet_user_login::spassword() const {
  return *spassword_;
}
inline void packet_user_login::set_spassword(const ::std::string& value) {
  set_has_spassword();
  if (spassword_ == &::google::protobuf::internal::kEmptyString) {
    spassword_ = new ::std::string;
  }
  spassword_->assign(value);
}
inline void packet_user_login::set_spassword(const char* value) {
  set_has_spassword();
  if (spassword_ == &::google::protobuf::internal::kEmptyString) {
    spassword_ = new ::std::string;
  }
  spassword_->assign(value);
}
inline void packet_user_login::set_spassword(const char* value, size_t size) {
  set_has_spassword();
  if (spassword_ == &::google::protobuf::internal::kEmptyString) {
    spassword_ = new ::std::string;
  }
  spassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packet_user_login::mutable_spassword() {
  set_has_spassword();
  if (spassword_ == &::google::protobuf::internal::kEmptyString) {
    spassword_ = new ::std::string;
  }
  return spassword_;
}
inline ::std::string* packet_user_login::release_spassword() {
  clear_has_spassword();
  if (spassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spassword_;
    spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packet_user_login::set_allocated_spassword(::std::string* spassword) {
  if (spassword_ != &::google::protobuf::internal::kEmptyString) {
    delete spassword_;
  }
  if (spassword) {
    set_has_spassword();
    spassword_ = spassword;
  } else {
    clear_has_spassword();
    spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 iFlags = 3;
inline bool packet_user_login::has_iflags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_user_login::set_has_iflags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_user_login::clear_has_iflags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_user_login::clear_iflags() {
  iflags_ = 0;
  clear_has_iflags();
}
inline ::google::protobuf::int32 packet_user_login::iflags() const {
  return iflags_;
}
inline void packet_user_login::set_iflags(::google::protobuf::int32 value) {
  set_has_iflags();
  iflags_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protos_2fproto_2eproto__INCLUDED
